{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ramon\\\\Desktop\\\\nlw_react-main\\\\src\\\\Contexts\\\\CountDownContext.tsx\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { ChallengesContext } from \"./ChallengesContext\";\nexport const CountdownContext = /*#__PURE__*/createContext({});\nlet countdownTimeout;\nexport function CountdownProvider({\n  children\n}) {\n  const {\n    startNewChallege\n  } = useContext(ChallengesContext);\n  const {\n    0: time,\n    1: setTime\n  } = useState(0.05 * 60);\n  const {\n    0: active,\n    1: setActive\n  } = useState(false);\n  const {\n    0: hasFinished,\n    1: setHasFinished\n  } = useState(false);\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n\n  function startCountdown() {\n    setActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setActive(false);\n    setTime(0.05 * 60);\n  }\n\n  useEffect(() => {\n    if (active && time > 0) {\n      countdownTimeout = setTimeout(() => {\n        setTime(time - 1);\n      }, 1000);\n    } else if (active && time == 0) {\n      startNewChallege();\n      setHasFinished(true);\n      resetCountdown();\n    }\n  }, [active, time]);\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      minutes,\n      seconds,\n      hasFinished,\n      active,\n      startCountdown,\n      resetCountdown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/Ramon/Desktop/nlw_react-main/src/Contexts/CountDownContext.tsx"],"names":["createContext","useContext","useEffect","useState","ChallengesContext","CountdownContext","countdownTimeout","CountdownProvider","children","startNewChallege","time","setTime","active","setActive","hasFinished","setHasFinished","minutes","Math","floor","seconds","startCountdown","resetCountdown","clearTimeout","setTimeout"],"mappings":";;AAAA,SACEA,aADF,EAGEC,UAHF,EAIEC,SAJF,EAKEC,QALF,QAMO,OANP;AAOA,SAASC,iBAAT,QAAkC,qBAAlC;AAeA,OAAO,MAAMC,gBAAgB,gBAAGL,aAAa,CAAC,EAAD,CAAtC;AAEP,IAAIM,gBAAJ;AAEA,OAAO,SAASC,iBAAT,CAA2B;AAAEC,EAAAA;AAAF,CAA3B,EAAyC;AAC9C,QAAM;AAAEC,IAAAA;AAAF,MAAuBR,UAAU,CAACG,iBAAD,CAAvC;AAEA,QAAM;AAAA,OAACM,IAAD;AAAA,OAAOC;AAAP,MAAkBR,QAAQ,CAAC,OAAO,EAAR,CAAhC;AACA,QAAM;AAAA,OAACS,MAAD;AAAA,OAASC;AAAT,MAAsBV,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM;AAAA,OAACW,WAAD;AAAA,OAAcC;AAAd,MAAgCZ,QAAQ,CAAC,KAAD,CAA9C;AAEA,QAAMa,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAG,EAAlB,CAAhB;AACA,QAAMS,OAAO,GAAGT,IAAI,GAAG,EAAvB;;AAEA,WAASU,cAAT,GAA0B;AACxBP,IAAAA,SAAS,CAAC,IAAD,CAAT;AACD;;AAED,WAASQ,cAAT,GAA0B;AACxBC,IAAAA,YAAY,CAAChB,gBAAD,CAAZ;AACAO,IAAAA,SAAS,CAAC,KAAD,CAAT;AACAF,IAAAA,OAAO,CAAC,OAAO,EAAR,CAAP;AACD;;AAEDT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,MAAM,IAAIF,IAAI,GAAG,CAArB,EAAwB;AACtBJ,MAAAA,gBAAgB,GAAGiB,UAAU,CAAC,MAAM;AAClCZ,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACD,OAF4B,EAE1B,IAF0B,CAA7B;AAGD,KAJD,MAIO,IAAIE,MAAM,IAAIF,IAAI,IAAI,CAAtB,EAAyB;AAC9BD,MAAAA,gBAAgB;AAChBM,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAM,MAAAA,cAAc;AACf;AACF,GAVQ,EAUN,CAACT,MAAD,EAASF,IAAT,CAVM,CAAT;AAYA,sBACE,QAAC,gBAAD,CAAkB,QAAlB;AACE,IAAA,KAAK,EAAE;AACLM,MAAAA,OADK;AAELG,MAAAA,OAFK;AAGLL,MAAAA,WAHK;AAILF,MAAAA,MAJK;AAKLQ,MAAAA,cALK;AAMLC,MAAAA;AANK,KADT;AAAA,cAUGb;AAVH;AAAA;AAAA;AAAA;AAAA,UADF;AAcD","sourcesContent":["import {\r\n  createContext,\r\n  ReactNode,\r\n  useContext,\r\n  useEffect,\r\n  useState,\r\n} from \"react\";\r\nimport { ChallengesContext } from \"./ChallengesContext\";\r\n\r\ninterface CountdownContextData {\r\n    minutes: number;\r\n    seconds: number;\r\n    hasFinished: boolean;\r\n    active: boolean;\r\n    startCountdown: () => void;\r\n    resetCountdown: () => void;\r\n}\r\n\r\ninterface CountdownProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const CountdownContext = createContext({} as CountdownContextData);\r\n\r\nlet countdownTimeout: NodeJS.Timeout;\r\n\r\nexport function CountdownProvider({ children }) {\r\n  const { startNewChallege } = useContext(ChallengesContext);\r\n\r\n  const [time, setTime] = useState(0.05 * 60);\r\n  const [active, setActive] = useState(false);\r\n  const [hasFinished, setHasFinished] = useState(false);\r\n\r\n  const minutes = Math.floor(time / 60);\r\n  const seconds = time % 60;\r\n\r\n  function startCountdown() {\r\n    setActive(true);\r\n  }\r\n\r\n  function resetCountdown() {\r\n    clearTimeout(countdownTimeout);\r\n    setActive(false);\r\n    setTime(0.05 * 60);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (active && time > 0) {\r\n      countdownTimeout = setTimeout(() => {\r\n        setTime(time - 1);\r\n      }, 1000);\r\n    } else if (active && time == 0) {\r\n      startNewChallege();\r\n      setHasFinished(true);\r\n      resetCountdown();\r\n    }\r\n  }, [active, time]);\r\n\r\n  return (\r\n    <CountdownContext.Provider\r\n      value={{\r\n        minutes,\r\n        seconds,\r\n        hasFinished,\r\n        active,\r\n        startCountdown,\r\n        resetCountdown,\r\n      }}\r\n    >\r\n      {children}\r\n    </CountdownContext.Provider>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}